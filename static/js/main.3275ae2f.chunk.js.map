{"version":3,"sources":["components/Section/index.js","components/Section/Section.js","components/Modal/index.js","components/Modal/Modal.js","App.js","index.js"],"names":["Section","props","state","isEditable","isFilled","handleChange","bind","toggleEditing","this","fields","map","key","setState","name","e","target","value","preventDefault","values","modCount","handleSaved","Object","keys","slice","reduce","result","sectionName","items","field","i","className","htmlFor","id","title","type","placeholder","defaultValue","onChange","required","onSubmit","React","Component","Modal","fieldName","info","data","JSON","parse","entries","forEach","filter","item","App","sectionsFilled","submitted","handleSubmit","updateFilledCount","retrieveInfo","status","newInfo","stringify","current","merged","general","education","work","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3275ae2f.chunk.js","sourcesContent":["import Section from './Section';\n\nexport default Section;\n","import React from 'react';\n\nclass Section extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditable: true,\n      isFilled: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.toggleEditing = this.toggleEditing.bind(this);\n  }\n\n  componentDidMount() {\n    const { fields } = this.props;\n    fields.map((key) => this.setState({ [key.name]: '' }));\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  toggleEditing(e) {\n    e.preventDefault();\n    const { isEditable, ...values } = this.state;\n    const { modCount, handleSaved } = this.props;\n\n    if (isEditable) {\n      this.setState({ isEditable: false, isFilled: true }, () =>\n        modCount(this.state.isFilled),\n      );\n      handleSaved(\n        Object.keys(values)\n          .slice(1)\n          .reduce((result, key) => {\n            result[key] = values[key];\n            return result;\n          }, {}),\n      );\n    } else {\n      this.setState({ isEditable: true, isFilled: false }, () =>\n        modCount(this.state.isFilled),\n      );\n    }\n  }\n\n  render() {\n    const { sectionName, fields } = this.props;\n    const { isEditable, ...values } = this.state;\n    let items = [];\n\n    if (isEditable) {\n      items = fields.map((field, i) => {\n        return (\n          <div className=\"field-wrapper\" key={i}>\n            <label htmlFor={field.id}>{field.title}</label>\n            {field.type === 'textarea' ? (\n              <textarea\n                id={field.id}\n                name={field.name}\n                placeholder={field.placeholder}\n                defaultValue={values[field.name]}\n                onChange={this.handleChange}\n              ></textarea>\n            ) : (\n              <input\n                id={field.id}\n                type={field.type}\n                name={field.name}\n                placeholder={field.placeholder}\n                defaultValue={values[field.name]}\n                onChange={this.handleChange}\n                required\n              />\n            )}\n          </div>\n        );\n      });\n    } else {\n      items = fields.map((field, i) => {\n        return (\n          <div className=\"field-wrapper\" key={i}>\n            <label htmlFor={field.id}>{field.title}</label>\n            <div className=\"field-saved\">{values[field.name]}</div>\n          </div>\n        );\n      });\n    }\n\n    return (\n      <section className=\"section\">\n        <header className=\"section-name\">{sectionName}</header>\n        <form className=\"section-form\" onSubmit={this.toggleEditing}>\n          <div className=\"section-fields\">{items}</div>\n          <button\n            className=\"btn btn-toggle-edit\"\n            type=\"submit\"\n            onSubmit={this.toggleEditing}\n          >\n            {isEditable ? 'Save' : 'Edit'}\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nexport default Section;\n","import Modal from './Modal';\n\nexport default Modal;\n","import React from 'react';\n\nclass Modal extends React.Component {\n  render() {\n    const { fields, info } = this.props;\n    const data = JSON.parse(info);\n    let fieldName;\n\n    return (\n      <div className=\"modal\">\n        <div className=\"modal-message\">\n          <p>Thank you!</p>\n          <p>We'll contact you soon.</p>\n        </div>\n        <div className=\"submitted-info\">\n          {Object.entries(data).map((key, i) => {\n            Object.entries(fields).forEach((field) => {\n              field[1].filter((item) => {\n                if (item.name === key[0]) {\n                  fieldName = item.title;\n                }\n                return item.title;\n              });\n            });\n\n            return (\n              <p key={i}>\n                <span className=\"modal-field-title\">{fieldName}</span>:{' '}\n                <span>{key[1]}</span>\n              </p>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React from 'react';\nimport Section from './components/Section';\nimport Modal from './components/Modal';\nimport fields from './assets/fields.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sectionsFilled: 0,\n      submitted: false,\n      info: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateFilledCount = this.updateFilledCount.bind(this);\n    this.retrieveInfo = this.retrieveInfo.bind(this);\n  }\n\n  handleSubmit() {\n    const { sectionsFilled } = this.state;\n    if (sectionsFilled < 3) {\n      return;\n    }\n    this.setState({ submitted: true });\n  }\n\n  updateFilledCount(status) {\n    const { sectionsFilled } = this.state;\n    if (status) {\n      this.setState({ sectionsFilled: sectionsFilled + 1 });\n    } else {\n      this.setState({ sectionsFilled: sectionsFilled - 1 });\n    }\n  }\n\n  retrieveInfo(newInfo) {\n    if (this.state.info === '') {\n      this.setState({ info: JSON.stringify(newInfo) });\n    } else {\n      const current = JSON.parse(this.state.info);\n      const merged = JSON.stringify({ ...current, ...newInfo });\n      this.setState({ info: merged });\n    }\n  }\n\n  render() {\n    const { submitted, info } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>CV Application</h1>\n        <Section\n          sectionName=\"General Information\"\n          fields={fields.general}\n          modCount={this.updateFilledCount}\n          handleSaved={this.retrieveInfo}\n        />\n        <Section\n          sectionName=\"Education\"\n          fields={fields.education}\n          modCount={this.updateFilledCount}\n          handleSaved={this.retrieveInfo}\n        />\n        <Section\n          sectionName=\"Work Experience\"\n          fields={fields.work}\n          modCount={this.updateFilledCount}\n          handleSaved={this.retrieveInfo}\n        />\n        <button className=\"btn btn-submit\" onClick={this.handleSubmit}>\n          Submit\n        </button>\n        {submitted ? (\n          <>\n            <div className=\"overlay\"></div>\n            <Modal fields={fields} info={info} />\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}